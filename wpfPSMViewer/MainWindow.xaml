<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:PSMViewer"
        xmlns:ViewModels="clr-namespace:PSMViewer.ViewModels"        
        xmlns:Models="clr-namespace:PSMViewer.Models"        
        xmlns:prop="clr-namespace:PSMViewer.Properties"
        xmlns:toolkit="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:v="clr-namespace:PSMViewer.Visualizations"
        xmlns:xcad="http://schemas.xceed.com/wpf/xaml/avalondock"
        x:Class="PSMViewer.MainWindow"
        mc:Ignorable="d"
        Title="PSM Data Viewer" Height="{Binding [w_height], Mode=TwoWay}" Width="{Binding [w_width], Mode=TwoWay}" Left="{Binding [w_left], Mode=TwoWay}" Top="{Binding [w_top], Mode=TwoWay}"
    x:Name="window" SnapsToDevicePixels="True" Icon="icons\database_table.png">

    <Window.CommandBindings>

        <CommandBinding Command="local:Commands.Next" CanExecute="CanExecute" Executed="Next" />
        <CommandBinding Command="local:Commands.Previous" CanExecute="CanExecute" Executed="Previous" />
        <CommandBinding Command="local:Commands.Refresh" CanExecute="CanExecute" Executed="RefreshTable"/>
        <CommandBinding Command="local:Commands.Exit" CanExecute="CanExecute" Executed="Exit" />
        <CommandBinding Command="local:Commands.About" CanExecute="CanExecute" Executed="About" />

    </Window.CommandBindings>

    <Window.Resources>

        <SolidColorBrush x:Key="ToolBarActiveBrush" Color="White"/>
        
        <DataTemplate x:Key="KeyItemTemplate">

            <StackPanel>
                <Grid>

                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="45*"/>
                        <ColumnDefinition Width="10*"/>
                        <ColumnDefinition Width="45*"/>
                    </Grid.ColumnDefinitions>

                    <TextBlock Text="{Binding Name, Mode=OneWay}" Grid.Column="0"/>
                    <TextBlock Text=" " Grid.Column="1"/>
                    <TextBlock Text="{Binding Type.Name, Mode=OneWay}" Grid.Column="2" FontWeight="Bold"/>

                </Grid>

            </StackPanel>
        </DataTemplate>

        <Style x:Key="TreeViewItemFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Fill" Color="#FF595959"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Stroke" Color="#FF262626"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Stroke" Color="#FF1BBBFA"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Fill" Color="Transparent"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Stroke" Color="#FF262626"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Fill" Color="#FF595959"/>
        <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Fill" Color="Transparent"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Stroke" Color="#FF989898"/>
        <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Width" Value="16"/>
            <Setter Property="Height" Value="16"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="Transparent" Height="16" Padding="5,5,5,5" Width="16">
                            <Path x:Name="ExpandPath" Data="{StaticResource TreeArrow}" Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}" Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}">
                                <Path.RenderTransform>
                                    <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                                </Path.RenderTransform>
                            </Path>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="RenderTransform" TargetName="ExpandPath">
                                    <Setter.Value>
                                        <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Fill}"/>
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}"/>
                                <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsChecked" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}"/>
                                <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type TreeViewItem}">

            <Setter Property="ItemsSource" Value="{Binding Children}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="Padding" Value="1,0,0,0"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeViewItem}">

                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="19" Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpandCollapseToggleStyle}"/>
                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="1" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Border>
                            <ItemsPresenter x:Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="false">
                                <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="HasItems" Value="false">
                                <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                            </Trigger>
                            <Trigger Property="IsSelected" Value="true">
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="true"/>
                                    <Condition Property="IsSelectionActive" Value="false"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                    <Setter Property="ItemsPanel">
                        <Setter.Value>
                            <ItemsPanelTemplate>
                                <VirtualizingStackPanel/>
                            </ItemsPanelTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
        
    </Window.Resources>

    <Window.DataContext>
        <ViewModels:Main/>
    </Window.DataContext>

    <Window.ContextMenu>

        <ContextMenu x:Name="treeContextMenu">

            <ContextMenu.CommandBindings>
                <CommandBinding Command="local:Commands.ContextMenuClick" Executed="ContextMenuClick" CanExecute="ContextMenu_CanExecute" />
            </ContextMenu.CommandBindings>

            <ContextMenu.Resources>

                <Style TargetType="{x:Type MenuItem}">
                    <Setter Property="Command" Value="local:Commands.ContextMenuClick"/>
                </Style>

                <Style TargetType="{x:Type MenuItem}" x:Key="WindowsItemStyle">
                    <Setter Property="DataContext" Value="{Binding}"/>
                    <Setter Property="Header" Value="{Binding Title}"/>
                </Style>

                <ControlTemplate x:Key="NewWindowControlTemplate" TargetType="{x:Type MenuItem}">
                    <Grid SnapsToDevicePixels="True">
                        <Rectangle x:Name="Bg" Fill="{TemplateBinding Background}" RadiusY="2" RadiusX="2" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
                        <Rectangle x:Name="InnerBorder" Margin="1" RadiusY="2" RadiusX="2"/>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="24" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                                <ColumnDefinition Width="4"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="37"/>
                                <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                                <ColumnDefinition Width="17"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" ContentSource="Icon" Margin="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                            <Border x:Name="GlyphPanel" BorderBrush="#FFCDD3E6" BorderThickness="1" Background="#FFE6EFF4" CornerRadius="3" Height="22" Margin="1" Visibility="Hidden" Width="22">
                                <Path x:Name="Glyph" Data="M0,5.1L1.7,5.2 3.4,7.1 8,0.4 9.2,0 3.3,10.8z" Fill="#FF0C12A1" FlowDirection="LeftToRight" Height="11" Width="9"/>
                            </Border>
                            <ContentPresenter ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" Grid.Column="2" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            <TextBlock Grid.Column="4" Margin="{TemplateBinding Padding}" Text="{TemplateBinding InputGestureText}"/>
                            <TextBox Text="{Binding Windows.Count, ElementName=window, Mode=OneWay}" Grid.Column="4"></TextBox>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter Property="Fill" TargetName="Bg">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                        <GradientStop Color="#34C5EBFF" Offset="0"/>
                                        <GradientStop Color="#3481D8FF" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Stroke" TargetName="Bg" Value="#8071CBF1"/>
                            <Setter Property="Stroke" TargetName="InnerBorder" Value="#40FFFFFF"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#FF9A9A9A"/>
                            <Setter Property="Background" TargetName="GlyphPanel" Value="#FFEEE9E9"/>
                            <Setter Property="BorderBrush" TargetName="GlyphPanel" Value="#FFDBD6D6"/>
                            <Setter Property="Fill" TargetName="Glyph" Value="#FF848589"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </ContextMenu.Resources>

            <MenuItem Header="Chart Type" DataContext="{x:Static v:VisualizationControl.List}" IsVisibleChanged="ChartTypeMenuItem_IsVisibleChanged" ItemsSource="{Binding}">

                <MenuItem.ItemContainerStyle>
                    <Style TargetType="{x:Type MenuItem}">
                        <Setter Property="DataContext" Value="{Binding Type}" />
                        <Setter Property="Header" Value="{Binding DisplayName}" />
                        <Setter Property="IsChecked" Value="{Binding IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        <Setter Property="Command" Value="local:Commands.ContextMenuClick"/>
                        <Setter Property="Icon">
                            <Setter.Value>
                                <Image Source="{Binding Icon}"/>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </MenuItem.ItemContainerStyle>
                
            </MenuItem>

            <MenuItem Header="Add Chart">
                
                <MenuItem Header="To New Window" Template="{StaticResource NewWindowControlTemplate}" />
                <MenuItem Header="To Existing Window" ItemsSource="{Binding Windows, ElementName=window}" >
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}">
                            <Setter Property="Header" Value="{Binding Title}" />
                            <Setter Property="Command" Value="local:Commands.ContextMenuClick"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>

                </MenuItem>

            </MenuItem>


        </ContextMenu>

    </Window.ContextMenu>
    
    <Grid>

        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="100*"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>

        <Menu Grid.Row="0" Grid.RowSpan="1">

            <MenuItem Header="File" >
                <MenuItem Header="Exit" Command="local:Commands.Exit"/>
            </MenuItem>
            <MenuItem Header="Windows" ItemsSource="{Binding Windows, ElementName=window}" >
                <MenuItem.ItemContainerStyle>
                    <Style TargetType="{x:Type MenuItem}">
                        <Setter Property="Header" Value="{Binding Title}" />
                    </Style>
                </MenuItem.ItemContainerStyle>

            </MenuItem>
            <MenuItem Header="Help">
                <MenuItem Header="About" Command="local:Commands.About"/>
            </MenuItem>
            

        </Menu>

        <Grid Grid.RowSpan="1" Grid.Row="1">

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="50*"/>
                <ColumnDefinition Width="150*"/>
            </Grid.ColumnDefinitions>

            <TreeView x:Name="treeView" Grid.Column="0" Background="{x:Null}" BorderThickness="0,0,1,0" BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" >                

                <TreeViewItem Header="Top Level Keys" x:Name="rootItem" ItemTemplate="{DynamicResource KeyItemTemplate}" IsExpanded="True" >
                    <TreeViewItem.DataContext>
                        <Models:KeyItem/>
                    </TreeViewItem.DataContext>
                </TreeViewItem>
                
            </TreeView>

            <Grid Grid.Column="1">

                <Grid.Resources>

                    <Style TargetType="{x:Type Button}">
                        <Setter Property="Margin" Value="5,5" />
                    </Style>
                    <Style TargetType="{x:Type TextBlock}" >
                        <Setter Property="VerticalAlignment" Value="Center" />
                        <Setter Property="Margin" Value="5,5" />
                    </Style>
                </Grid.Resources>

                <Grid.RowDefinitions>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="50*"/>
                    <RowDefinition Height="50*"/>
                </Grid.RowDefinitions>

                <DockPanel x:Name="dock" IsEnabled="False" Grid.Row="0" Grid.RowSpan="1">

                    <ToolBarTray DockPanel.Dock="Top" PreviewMouseMove="ToolBarTray_PreviewMouseMove" IsHitTestVisible="True">
                        
                        <ToolBarTray.Resources>
                            <Style TargetType="{x:Type ToolBar}">
                                <Setter Property="IsEnabled" Value="{Binding isActive}" />
                                <Setter Property="IsHitTestVisible" Value="True" />
                            </Style>
                        </ToolBarTray.Resources>

                        <ToolBar  HorizontalAlignment="Right" DataContext="{Binding Indexbased}">
                            
                            <Button ToolTip="Previous" Command="local:Commands.Previous" >
                                <Image Source="icons\resultset_previous.png"/>
                            </Button>
                            <Button ToolTip="Next" Command="local:Commands.Next">
                                <Image Source="icons\resultset_next.png"/>
                            </Button>
                            <Button ToolTip="Refresh" Command="local:Commands.Refresh">
                                <Image Source="icons\table_refresh.png"/>
                            </Button>

                            <Label VerticalAlignment="Center" Content="Count"/>
                            <TextBox  Text="{Binding Count, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" Width="100" KeyUp="Reload"/>
                            <TextBlock Text="{Binding Start, Mode=OneWay}"/>
                            <TextBlock Text="{Binding End, Mode=OneWay}"/>

                        </ToolBar>

                        <ToolBar DataContext="{Binding Timebased}">

                            <ToolBar.Resources>
                                <Style TargetType="{x:Type DatePicker}">
                                    <Setter Property="SelectedDateFormat" Value="Long" />
                                </Style>
                                <Style TargetType="{x:Type toolkit:DateTimePicker}">
                                    <Setter Property="TimeFormat" Value="SortableDateTime"/>
                                </Style>
                            </ToolBar.Resources>

                            <Button ToolTip="Previous" Command="local:Commands.Previous" >
                                <Image Source="icons\resultset_previous.png"/>
                            </Button>
                            <Button ToolTip="Next" Command="local:Commands.Next">
                                <Image Source="icons\resultset_next.png"/>
                            </Button>
                            <Button ToolTip="Refresh" Command="local:Commands.Refresh">
                                <Image Source="icons\table_refresh.png"/>
                            </Button>

                            <Label Content="From"/>
                            <toolkit:DateTimePicker Value="{Binding Start, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ValueChanged="Reload"/>
                            <Label Content="To"/>
                            <toolkit:DateTimePicker Value="{Binding End, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ValueChanged="Reload"/>
                            <Label Content="Count"/>
                            <toolkit:TimeSpanUpDown Value="{Binding Count, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ValueChanged="Reload"/>
                            
                        </ToolBar>

                    </ToolBarTray>

                </DockPanel>

                <DataGrid x:Name="dataGrid" CanUserAddRows="False" CanUserDeleteRows="False" ItemsSource="{Binding Entries}" AutoGenerateColumns="True" Grid.RowSpan="1" Grid.Row="1" Background="{x:Null}" BorderThickness="0" />

                <Grid Grid.Row="2" Grid.RowSpan="1" x:Name="visualizationGrid" Margin="10,10,10,10"/>
                
            </Grid>

        </Grid>
        
        <StatusBar Grid.Row="2"  Grid.RowSpan="1" BorderBrush="Black">
            <StatusBarItem Width="auto" BorderThickness="0,1,0,0" BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}">
              <TextBlock Text="{Binding Status, ElementName=window, Mode=OneWay}" x:Name="statusText" />
            </StatusBarItem>
        </StatusBar>

    </Grid>

</Window>
